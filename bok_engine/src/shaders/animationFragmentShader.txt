#version 460 core

#define MAX_LIGHTS 16

in vec2 tc;
in vec3 n;
in vec3 toLightVector[MAX_LIGHTS];
in vec3 toCameraVector;
in float visibility;

out vec4 fragColor;

uniform sampler2D tex;
uniform vec3 lightColour[MAX_LIGHTS];
uniform vec3 attenuation[MAX_LIGHTS];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main()
{
    vec3 unitNormal = normalize(n);
    vec3 unitVectorToCamera = normalize(toCameraVector);
    
    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);
    
    
    for(int i = 0; i < MAX_LIGHTS; i++) {
        //vec3 halfwayDir = normalize(toLightVector[i] + toCameraVector);
    
        float distance = length(toLightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        vec3 unitLightVector = normalize(toLightVector[i]);
        //float nDot1 = dot(unitNormal, halfwayDir);
        float nDot1 = dot(unitNormal, unitLightVector);
        float brightness = max(nDot1,0.3);
        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor,0.0);
        float dampedFactor = pow(specularFactor,shineDamper);
        totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
        totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
        //totalSpecular = totalSpecular + pow(max(nDot1, 0.0), 100)/attFactor;
    }
    totalDiffuse = max(totalDiffuse, 0.2);
        
    vec4 textureColour = texture(tex,tc);
    
    fragColor = vec4(totalDiffuse,1.0) * textureColour + vec4(totalSpecular,1.0);
    //fragColor = textureColour;
    fragColor = mix(vec4(skyColour,1.0), fragColor, visibility);
    
    
}
