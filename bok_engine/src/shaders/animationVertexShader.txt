#version 460 core

#define MAX_BONE 50

#define MAX_LIGHTS 16

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 texCoord;
layout (location = 2) in vec3 normal;
//layout (location = 3) in vec3 tangent;
layout (location = 3) in vec3 bone_id;
layout (location = 4) in vec3 weight;

out vec2 tc;
out vec3 n;
out vec3 toLightVector[MAX_LIGHTS];
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[MAX_LIGHTS];

uniform mat4 bones[MAX_BONE];

const float density = 0.007;
const float gradient = 1.5;

void main()
{
    //vec3 normalizedWeight = normalize(weight);
    vec3 normalizedWeight = weight;

    mat4 boneTransformation =
    bones[uint(bone_id.x)] * normalizedWeight.x +
    bones[uint(bone_id.y)] * normalizedWeight.y +
    bones[uint(bone_id.z)] * normalizedWeight.z;

    vec4 worldPosition = transformationMatrix * boneTransformation * vec4(position, 1.0);
    vec4 positionRelativeToCam = viewMatrix * worldPosition;
    gl_Position = projectionMatrix * positionRelativeToCam;
    tc = texCoord;

    //n = (transformationMatrix * boneTransformation * vec4(normal, 0)).xyz;
    n = mat3(transformationMatrix * boneTransformation) * normal;
    
    for(int i = 0; i < MAX_LIGHTS; i++) {
        toLightVector[i] = lightPosition[i] - worldPosition.xyz;
    }
    toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
    
    float distance = length(positionRelativeToCam.xyz);
    visibility = exp(-pow((distance*density),gradient));
    visibility = clamp(visibility,0.0,1.0);
}
